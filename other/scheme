- append(parent, i, beforeChild?)
    if beforeChild == null && parent is fragment
        beforeChild = parent.lastNode;

	if parent if fragment
		parentDom = parent.parentDom
	else 
		parentDom = parent.dom


	node = parent.children[i]
	if node is fragment 
        node.parentDom = parentDom
        node.firstNode = document.createComment()
        node.lastNode = document.createComment()
        parentDom.insertBefore(node.firstNode, beforeChild)
        parentDom.insertBefore(node.lastNode, beforeChild)

		if node is Component
			createComponent() //children created

	else
		if textNode
			node.dom = createTextNode()
            parentDom.insertBefore(node.dom, beforeChild)


		if tagNode
			node.dom = createElement()
			parent.dom.insertBefore(node.dom, beforeChild)

		if attrs
			createAttrs()

	if children
		for children
			normChild(node, i)
			append(node, i)

	if node is Component
		node.component.didMount()



- update(old, parent, i)
	node = parent[i]
	node.dom = old.dom

	if old.constructor != node.constructor
		replaceNode(old, parent, i)
		return


	if fragmentType is component
		if constructor is not same
			replaceNode(old, parent, i)
			return

		updateComponent(old, parent, i) // swap old and new nodes
		return

	if node is fragment
    	node.firstNode = old.firstNode
    	node.lastNode = old.lastNode

	if textNode
		node.dom.textContent = node.text
		destroy()
		return

	if tagNode
		if tag is not same
			replaceNode(old, parent, i)
			return

		if attrs
			updateAttrs()

		isSuccess = updateAttrs(old, parent, i)
		if not isSuccess
			replaceNode(old, parent, childPos)
			return

		if newAttrs != oldAttrs
			replaceNode(old, parent, i)
			return


	updateChildren(old, parent.children[i])
	destroy()


- updateChildren(old, node)

	if newChildren

		for newChildren
			fitPos = null
			normChild(node, i)
			if keyMap
				if newChild.key
					fitPos = old.keyMap[newChild.key]
					
				else
					if oldChild && not oldChild.key
						fitPos = i

			else
				if oldChild
					fitPos = i


            if fitPos != null || fitPos !== i
                
                if prevChild
                    if prevChild is fragment
                    	beforeChild = prevChild.lastNode.nextSibling
                    else 
                        beforeChild = prevChild.dom.nextSibling

                else 
                	node is fragment
                		beforeChild = node.firstNode.nextSibling
                	else 
                		beforeChild = node.dom.firstChild


			if fitPos is not null
				fitCount++
				update(old.children[fitPos], node, i)
				if fitPos != i
					move(node.children[i], node, beforeChild)

				oldChildren[fitPos] = null

			else 
				append(node, i, beforeChild)

            prevChild = node.children[i]


	if oldChildren and oldChildren.length != fitCount
		for oldChildren
			if child
				remove(child, old, i)

			oldChildren[i] = null





- move(node, parent, beforeChild) {
	if parent if fragment
		parentDom = parent.parentDom
	else 
		parentDom = parent.dom

    if node is fragment
        nextDom
        dom = node.firstNode
        endNode = node.lastNode
        while true 
            nextDom = dom.nextSibling
            parentDom.insertBefore(dom, beforeChild)
            if dom == endNode
                break
            dom = nextDom

    else
        parentDom.insertBefore(node.dom, beforeChild)



- remove(node, parent, i)
	if node is component
		component.willUnmount()

	if children
		for children
			remove(node.children[i], node, i)

    if node is fragment
        node.parentDom.removeChild(node.firstNode)
        node.parentDom.removeChild(node.lastNode)
    else 
    	if parent is fragment
    		parentDom = parent.parentDom
    	else 
    		parentDom = parent.dom

        parentDom.removeChild(node.dom)
    }

	node.destroy()
	if i
		parent.children[i] = null


- replaceNode(old, parent, i)
	if old is fragment
		beforeChild = old.firstNode
	else 
		beforeChild = old.dom
    append(parent, i, beforeChild)
	remove(old, parent)


- createComponent(node)
	props = node.attrs || {}
	props.children = node.children
	component = new node.ctor(props)
	component.node = node
	node.component = component
	component.willMount()
	node.children = [render()]


- constructor(props)
    this.props = props

- forceUpdate()
	this.willUpdate()
	children = [this.render()]
	temp = new VComponent()
	temp.children = children
	temp.firstNode = this.node.firstNode
	temp.lastNode = this.node.lastNode
	temp.parentDom = this.node.parentDom

	updateChildren(this.node, temp) // clear this.node.children
	this.node.children = children
	this.didUpdate()
	temp.destroy()


- updateComponent(old, parent, i)
	newNode = parent.children[i] 
	props = newNode.attrs || {}
	props.children = newNode.children
	old.component.willReceiveProps(props)
	old.component.props = props
	old.component.forceUpdate()	 // affect node children
	parent.children[i] = old
	newNode.destroy()
	//no destroy old


- render(node, dom)
	root = new VNode(node, dom)
	normChild(root, 0)
	append(root, 0)
	return node

- updater(old, node)
	root = new VNode(node)
	if old is fragment
		root.dom = old.parentDom
	else 
		root.dom = old.dom.parentNode

    normChild(root, 0)
    update(old, root, 0)
    return root.children[0]

//todo:normChild
//todo:createAttrs, updateAttrs
//todo:ref



//cloneElement
//createFactory
//unmountComponentAtNode
//renderToString
//renderToStaticMarkup
//isValidElement
//DOM
//PropTypes
//initializeTouchEvents
//Children

//setState
//boolean shouldComponentUpdate(object nextProps, object nextState)
//componentWillUpdate(object nextProps, object nextState)
//componentDidUpdate(object prevProps, object prevState)


//getInitialState
//getDefaultProps
//propTypes
//mixins
//statics
//displayName


//depricated
//replaceState
//getDOMNode
//setProps
//replaceProps


//render from real dom
