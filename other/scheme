- append(parent, i)
	node = parent.children[i]
	if node is fragment 
		node.dom = parent.dom
		node.lastNode = createTextNode()
		parent.dom.insertBefore(node.lastNode, parent.fragment ? parent.lastNode : null) 

		if node is Component
			createComponent() //children created

	else
		if textNode
			node.dom = createTextNode()

		if tagNode
			node.dom = createElement()

		parent.dom.insertBefore(node.dom, parent.fragment ? parent.lastNode : null) 

		if attrs
			createAttrs()

	if children
		for children
			normChild(node, i)
			append(node, i)

	if node is Component
		node.component.didMount()



- update(old, parent, i)
	node = parent[i]
	node.dom = old.dom;

	if old.constructor != node.constructor
		replaceNode(old, parent, i)
		return


	if fragmentType is component
		if constructor is not same
			replaceNode(old, parent, i)
			return

		updateComponent(old, parent, i) // swap old and new nodes
		return
	
	if textNode
		node.dom.textContent = node.text
		destroy()
		return

	if tagNode
		if tag is not same
			replaceNode(old, parent, i)
			return

		if attrs
			updateAttrs()

		isSuccess = updateAttrs(old, parent, i)
		if not isSuccess
			replaceNode(old, parent, childPos)
			return

		if newAttrs != oldAttrs
			replaceNode(old, parent, i)
			return


	updateChildren(old, parent.children[i])
	destroy()


- updateChildren(old, node)

	if newChildren
		for newChildren
			normChild(node, i)
			if keyMap
				if newChild.key
					fitPos = old.keyMap[newChild.key]
					
				else
					if oldChild && not oldChild.key
						fitPos = i

			else 
				fitPos = i

			if fitPos is not null
				fitCount++
				update(old.children[fitPos], node, i)
				if fitPos != i
					moveToEnd(newChild, node)
			else 
				append(node, i);


	if oldChildren and oldChildren.length != fitCount
		for oldChildren
			if child
				remove(child, old, i)


- remove(node, parent, i)
	if node is component
		component.willUnmount();

	if children
		for children
			remove(node.children[i], node, i)

	if node is fragment
		node.dom.removeChild(node.lastNode)

	parent.dom.removeChild(node.dom)
	node.destroy()
	if i
		parent.children[i] = null


- moveToEnd(node, parent)
	node.dom.parentNode.insertBefore(node.dom, parent.fragment ? parent.lastNode : null)


- replaceNode(old, parent, i)
	remove(old, parent)
	append(parent, i)


- createComponent(node)
	props = node.attrs
	props.children = node.children
	component = new node.ctor(props)
	component.node = node
	component.willMount()
	node.children = [render()]


- constructor(props)
    this.props = props

- forceUpdate()
	this.willUpdate()
	children = [this.render()]
	temp = new VComponent()
	temp.children = children
	updateChildren(this.node, temp) // clear this.node.children
	this.node.children = children
	this.didUpdate()
	temp.destroy()


- updateComponent(old, parent, i)
	newNode = parent.children[i] 
	props = newNode.attrs
	props.children = newNode.children
	old.component.willReceiveProps(props)
	old.component.props = props
	old.component.forceUpdate()	 // affect node children
	parent.children[i] = old
	newNode.destroy()
	//no destroy old


- render(node, dom)
	root = new VNode(node, dom)
	normChild(root, 0)
	append(root, 0)
	return node

- updater(old, node)
	root = new VNode(node)
	normChild(root, 0)
	update(old, root, 0)
	return node

//todo:normChild
//todo:createAttrs, updateAttrs
//todo:fill keyMap





